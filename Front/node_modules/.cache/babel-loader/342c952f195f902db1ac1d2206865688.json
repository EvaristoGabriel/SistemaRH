{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/private-theming';\nimport { exactProp } from '@mui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useTheme from '../useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst EMPTY_THEME = {};\n\nfunction InnerThemeProvider(props) {\n  const theme = useTheme();\n  return /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n    value: typeof theme === 'object' ? theme : EMPTY_THEME,\n    children: props.children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? InnerThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node\n} : void 0;\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n */\n\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: localTheme,\n    children: /*#__PURE__*/_jsx(InnerThemeProvider, {\n      children: children\n    })\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","map":{"version":3,"names":["React","PropTypes","ThemeProvider","MuiThemeProvider","exactProp","ThemeContext","StyledEngineThemeContext","useTheme","jsx","_jsx","EMPTY_THEME","InnerThemeProvider","props","theme","Provider","value","children","process","env","NODE_ENV","propTypes","node","localTheme","oneOfType","func","object","isRequired"],"sources":["/home/gabriel/CÃ³digos_VSC/Html-CSS-JS/SistemaRH/Front/node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/private-theming';\nimport { exactProp } from '@mui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useTheme from '../useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst EMPTY_THEME = {};\n\nfunction InnerThemeProvider(props) {\n  const theme = useTheme();\n  return /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n    value: typeof theme === 'object' ? theme : EMPTY_THEME,\n    children: props.children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? InnerThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node\n} : void 0;\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n */\n\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: localTheme,\n    children: /*#__PURE__*/_jsx(InnerThemeProvider, {\n      children: children\n    })\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAa,IAAIC,gBAA1B,QAAkD,sBAAlD;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,YAAY,IAAIC,wBAAzB,QAAyD,oBAAzD;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,WAAW,GAAG,EAApB;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;EACjC,MAAMC,KAAK,GAAGN,QAAQ,EAAtB;EACA,OAAO,aAAaE,IAAI,CAACH,wBAAwB,CAACQ,QAA1B,EAAoC;IAC1DC,KAAK,EAAE,OAAOF,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCH,WADe;IAE1DM,QAAQ,EAAEJ,KAAK,CAACI;EAF0C,CAApC,CAAxB;AAID;;AAEDC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCR,kBAAkB,CAACS,SAAnB,GAA+B;EACrE;AACF;AACA;EACEJ,QAAQ,EAAEf,SAAS,CAACoB;AAJiD,CAAvE,GAKI,KAAK,CALT;AAMA;AACA;AACA;AACA;;AAEA,SAASnB,aAAT,CAAuBU,KAAvB,EAA8B;EAC5B,MAAM;IACJI,QADI;IAEJH,KAAK,EAAES;EAFH,IAGFV,KAHJ;EAIA,OAAO,aAAaH,IAAI,CAACN,gBAAD,EAAmB;IACzCU,KAAK,EAAES,UADkC;IAEzCN,QAAQ,EAAE,aAAaP,IAAI,CAACE,kBAAD,EAAqB;MAC9CK,QAAQ,EAAEA;IADoC,CAArB;EAFc,CAAnB,CAAxB;AAMD;;AAEDC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,aAAa,CAACkB;AACtD;AADwC,EAEtC;EACA;EACA;EACA;EACA;;EAEA;AACF;AACA;EACEJ,QAAQ,EAAEf,SAAS,CAACoB,IATpB;;EAWA;AACF;AACA;EACER,KAAK,EAAEZ,SAAS,CAACsB,SAAV,CAAoB,CAACtB,SAAS,CAACuB,IAAX,EAAiBvB,SAAS,CAACwB,MAA3B,CAApB,EAAwDC;AAd/D,CAFF,GAiBI,KAAK,CAjBT;;AAmBA,IAAIT,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzCF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,aAAa,CAACkB,SAAd,GAA0BhB,SAAS,CAACF,aAAa,CAACkB,SAAf,CAA3E,GAAuG,KAAK,CAA5G;AACD;;AAED,eAAelB,aAAf"},"metadata":{},"sourceType":"module"}